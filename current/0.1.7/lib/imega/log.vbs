' iMega F4WSH'' LICENSE'' not many words about the license :)'' @file       log.vbs' @category   F4WSH' @package    iMega_Log' @copyright  Copyright (c) 2011 iMega ltd. (http://www.imega.ru, info@imega.ru)' @license    http://www.imega.ru/license/f4wsh' @version    0.1'Syslog Message Severities''EMERG   Emergency: system is unusable (not used on Windows, replaced by an ERROR)'ALERT   Alert: action must be taken immediately (not used on Windows, replaced by an ERROR)'CRIT    Critical: critical conditions (not used on Windows, replaced by an ERROR)'ERROR   Error: error conditions'WARN    Warning: warning conditions'NOTICE  Notice: normal but significant condition (not used on Windows, replaced by an INFO)'INFO    Informational: informational messages'DBG     Debug: debug messagesconst EMERG = 0, _	ALERT = 1, _	CRIT = 2, _	ERROR = 3, _	WARN = 4, _	NOTICE = 5, _	INFO = 6, _	DBG = 7'Source for the logging''FILE    to file (source as Scripting.FileSystemObject)'EVENTS  to Windows Events Log (source as WScript.Shell)'SYSLOG  to Unix'MAIL    to mail (source as iMega_Mail)'MSSQL   to database on Microsoft SQLconst FILE = 0, _	EVENTS = 1, _	SYSLOG = 2, _	MAIL = 3, _	MSSQL = 4	class iMega_Log	private oSource, _		sTypeSource	public property get source() source = oSource end property	public property get typeSource() typeSource = sTypeSource end property		public property let source(value) set oSource = value end property	public property let typeSource(value) sTypeSource = value end property		private sub Class_Initialize()		sTypeSource = FILE		if oSource = null then quit(0)	end sub		'Convert errors codes unix to win	'	'@param		int		value	Priority error	'@return	int	private function msgLogToWin(value)		select case value			case 0, 1, 2, 3				msgLogToWin = 1			case 4				msgLogToWin = 2			case 5, 6, 7				msgLogToWin = 4		end select 	end function		'Returns the type of error in human form 	'	'@param		int		iType	Priority error	'@return	string	private function msgTypeToStr(iType)		typesArray = split("EMERGENCY|ALERT|CRITICAL|ERROR|WARNING|NOTICE|INFO|DEBUG", "|")		msgTypeToStr = typesArray(iType)	end function		'Logs an event log	'	'@param		int		iType		Priority error	'@param		string	sMessage	Message to log	'@return	void	public function log (iType, sMessage)		select case sTypeSource			case 0				dim msg: msg = date & " " & time & " [" & msgTypeToStr(iType) & "] " & sMessage				oSource.WriteLine msg			case 1				dim number: number = msgLogToWin(iType)				oSource.LogEvent number, sMessage			case 2				'todo			case 3				'todo			case 4				'todo		end select	end functionend class